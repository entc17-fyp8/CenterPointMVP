#########################################################
# Base Image
#########################################################
# https://github.com/darrenjkt/CenterPoint/blob/main/docker/Dockerfile

FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04

ARG PYTHON_VERSION=3.6
ARG WITH_TORCHVISION=1
ARG DEBIAN_FRONTEND="noninteractive"

# # Add user
# ARG USERNAME=user
# ARG USER_ID
# ARG GROUP_ID
# RUN groupadd $USERNAME -g ${GROUP_ID}
# RUN useradd -g $GROUP_ID --create-home --shell /bin/bash $USERNAME 


RUN apt-get update && apt-get install -y --no-install-recommends \
         build-essential \
         git \
         curl \
         wget \
         nano \ 
         ca-certificates \
         libjpeg-dev \
         libpng-dev \
         libssl-dev \
         python3-opencv \
         software-properties-common && \
     rm -rf /var/lib/apt/lists/*

#########################################################
# Install 'rospy' for ROS Noetic
#########################################################
# https://vsbogd.github.io/coding/install-rospy-noetic-ubuntu-1804.html
# https://github.com/dusty-nv/jetson-containers/blob/master/Dockerfile.ros.noetic

ARG ROS_PKG=rospy
ENV ROS_DISTRO=noetic
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /workspace


#
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          git \
		cmake \
		build-essential \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/*

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -


#
# install bootstrap dependencies
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          libpython3-dev \
          python3-rosdep \
          python3-rosinstall-generator \
          python3-vcstool \
          build-essential && \
    rosdep init && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*


#
# download/build the ROS source
#

WORKDIR /workspace
# temporary workspace for building ros packages
RUN mkdir ros_catkin_ws
WORKDIR /workspace/ros_catkin_ws/
RUN mkdir ./src

# Clone ros packages using rosinstall_generator & vcs into ./src
# RUN rosinstall_generator \
#         rospy \
#         sensor_msgs \
#         nav_msgs \
#         ros_numpy \
#         jsk_recognition_msgs \
#     --rosdistro ${ROS_DISTRO} --deps --tar > ${ROS_DISTRO}-${ROS_PKG}.rosinstall 
# RUN vcs import --input ${ROS_DISTRO}-${ROS_PKG}.rosinstall ./src 

RUN rosinstall_generator \
        rospy \
        sensor_msgs \
        nav_msgs \
        ros_numpy \
    --rosdistro ${ROS_DISTRO} --deps --tar > ${ROS_DISTRO}-${ROS_PKG}.rosinstall 
RUN vcs import --input ${ROS_DISTRO}-${ROS_PKG}.rosinstall ./src 

# git clone custom ros pacages into ./src
RUN rosinstall_generator \
        jsk_footstep_msgs \
        pcl_msgs\
    --rosdistro ${ROS_DISTRO} --deps --tar > dependencies-for-jsk.rosinstall 
RUN vcs import --input dependencies-for-jsk.rosinstall ./src 
# RUN cd src && git clone  -b jsk-recognition-msgs https://github.com/entc17-fyp8/jsk_recognition.git
RUN cd src && git clone  -b jsk-recognition-msgs https://github.com/entc17-fyp8/jsk_recognition.git && cd jsk_recognition && git checkout 0025990ce4a0f0340b974020e33108381fb969f9

# Install system dependencies for above packages
RUN apt-get update && \
    rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro ${ROS_DISTRO} --skip-keys python3-pykdl -y 
# catkin make 
RUN python3 ./src/catkin/bin/catkin_make_isolated --install --install-space ${ROS_ROOT} -DCMAKE_BUILD_TYPE=Release && \
    rm -rf /var/lib/apt/lists/*


# setup entrypoint
WORKDIR /workspace
COPY ./docker/ros_entrypoint.sh /ros_entrypoint.sh
RUN ["chmod", "+x", "/ros_entrypoint.sh"]
RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc



#########################################################
# Install Dependencies for CenterPoint
#########################################################

# Install cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3.tar.gz
RUN tar -zxvf cmake-3.17.3.tar.gz
RUN cd cmake-3.17.3 && ./bootstrap
RUN cd cmake-3.17.3 && make 
RUN cd cmake-3.17.3 && make install 

# Install conda, python and pytorch
RUN curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && chmod +x ~/miniconda.sh \
    && ~/miniconda.sh -b -p /opt/conda \
    && rm ~/miniconda.sh \
    && /opt/conda/bin/conda install -y python=$PYTHON_VERSION \
    && /opt/conda/bin/conda install -y -c pytorch magma-cuda100 \
    && /opt/conda/bin/conda clean -ya
ENV PATH /opt/conda/bin:$PATH

RUN conda install -y -c pytorch\
    pytorch==1.1.0 \
    torchvision==0.3.0 \
    cudatoolkit=10.0 \
    && conda clean -ya

# rospkg
RUN pip install --no-cache-dir -U rospkg


#########################################################
# Setup CenterPoint
#########################################################

# Nuscenes dev-kit
WORKDIR /workspace
COPY nuscenes-devkit ./nuscenes-devkit
ENV PYTHONPATH "${PYTHONPATH}:/workspace/nuscenes-devkit/python-sdk"

# set the cuda path(change the path to your own cuda location) 
ENV PATH=/usr/local/cuda-10.0/bin:$PATH
ENV CUDA_PATH=/usr/local/cuda-10.0
ENV CUDA_HOME=/usr/local/cuda-10.0
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH

# APEX
WORKDIR /workspace
COPY apex ./apex
WORKDIR /workspace/apex
RUN pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./

# spconv
RUN apt-get update && apt-get install -y libboost-all-dev

WORKDIR /workspace
COPY spconv ./spconv
WORKDIR /workspace/spconv
RUN python setup.py bdist_wheel 
WORKDIR /workspace/spconv/dist
RUN pip install *

# CenterPoint (original repo) - copy files
# WORKDIR /workspace
# COPY CenterPoint ./CenterPoint
# WORKDIR /workspace/CenterPoint
# RUN pip install --no-cache-dir -r requirements.txt
# ENV PYTHONPATH "${PYTHONPATH}:/workspace/CenterPoint"
# Setup det3d, iou3d_nms
# WORKDIR /workspace/CenterPoint/det3d/ops/dcn 
# RUN python setup.py build_ext --inplace
# WORKDIR /workspace/CenterPoint/det3d/ops/iou3d_nms
# RUN python setup.py build_ext --inplace

# CenterPoint - mount as volume
VOLUME /CenterPoint
ENV PYTHONPATH "${PYTHONPATH}:/workspace/CenterPoint"

# Install requirements.txt for CenterPoint
COPY docker/requirements.txt /opt/app/requirements.txt
WORKDIR /opt/app
RUN pip install --no-cache-dir -r requirements.txt

#########################################################
# Other
#########################################################
# Clean image
# RUN apt-get clean && rm -rf /var/lib/apt/lists/* 

# Set up the work directory and entrypoint
WORKDIR /workspace