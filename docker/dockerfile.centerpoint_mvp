##################################################################################################################
# Base Image
##################################################################################################################
# Ubuntu: 18.04
# CUDA: 11.1
# Python: 3.7.+
# PyTorch: 1.9
# spconv: v1.2.1

### References: https://github.com/darrenjkt/CenterPoint/blob/main/docker/Dockerfile

FROM nvidia/cuda:11.1-cudnn8-devel-ubuntu18.04

ARG PYTHON_VERSION=3.7.10

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update &&\
    apt-get install -y --no-install-recommends software-properties-common &&\
    add-apt-repository ppa:deadsnakes/ppa
RUN apt-get install -y --no-install-recommends\
    python3.7 python3-pip python3.7-dev python3-setuptools
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 &&\
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
RUN python3 --version
RUN apt-get install -y --no-install-recommends \
         build-essential \
         git \
         curl \
         wget \
         nano \ 
         ca-certificates \
         libjpeg-dev \
         libpng-dev \
         libssl-dev \
         software-properties-common && \
     rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
RUN pip install wheel cython
RUN pip install torch==1.9.0+cu111 \
        torchvision==0.10.0+cu111 \
        -f https://download.pytorch.org/whl/torch_stable.html

RUN pip install --upgrade pip
RUN apt-get update && apt-get install ffmpeg libsm6 libxext6  -y --no-install-recommends
# RUN pip install --ignore-installed --upgrade opencv-python
RUN  apt-get update && apt-get install -y --no-install-recommends \
        python3-opencv
RUN apt-get update && apt-get install -y libboost-all-dev libboost-python-dev
RUN ln -s /usr/lib/x86_64-linux-gnu/libboost_python3.a /usr/lib/x86_64-linux-gnu/libboost_python37.a && \ 
    ln -s /usr/lib/x86_64-linux-gnu/libboost_python3.so /usr/lib/x86_64-linux-gnu/libboost_python37.so
##################################################################################################################
# Install 'rospy' for ROS Noetic
##################################################################################################################
# https://vsbogd.github.io/coding/install-rospy-noetic-ubuntu-1804.html
# https://github.com/dusty-nv/jetson-containers/blob/master/Dockerfile.ros.noetic

ARG ROS_PKG=rospy
ENV ROS_DISTRO=noetic
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3


WORKDIR /workspace

# add the ROS deb repo to the apt sources list
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
        git \
		cmake \
		build-essential \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/*

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -


# install bootstrap dependencies
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
          libpython3-dev \
          python3-rosdep \
          python3-rosinstall-generator \
          python3-vcstool \
          build-essential && \
    rosdep init && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*


# download/build the ROS source
WORKDIR /workspace
# temporary workspace for building ros packages
RUN mkdir ros_catkin_ws
WORKDIR /workspace/ros_catkin_ws/
RUN mkdir ./src

RUN rosinstall_generator \
        rospy \
        sensor_msgs \
        nav_msgs \
        ros_numpy \
        cv_bridge \
    --rosdistro ${ROS_DISTRO} --deps --tar > ${ROS_DISTRO}-${ROS_PKG}.rosinstall 
RUN vcs import --input ${ROS_DISTRO}-${ROS_PKG}.rosinstall ./src 

# git clone custom ros packages into ./src
RUN rosinstall_generator \
        jsk_footstep_msgs \
        pcl_msgs\
    --rosdistro ${ROS_DISTRO} --deps --tar > dependencies-for-jsk.rosinstall 
RUN vcs import --input dependencies-for-jsk.rosinstall ./src 
# Add jsk-recognition-msgs
RUN cd src && git clone  -b jsk-recognition-msgs https://github.com/entc17-fyp8/jsk_recognition.git && cd jsk_recognition && git checkout 0025990ce4a0f0340b974020e33108381fb969f9

# Install system dependencies for above packages
RUN apt-get update && \
    rosdep install --from-paths ./src --ignore-packages-from-source --rosdistro ${ROS_DISTRO} \
     --skip-keys python3-pykdl \
    -y 
# catkin make 
RUN python3 ./src/catkin/bin/catkin_make_isolated --install --install-space ${ROS_ROOT} -DCMAKE_BUILD_TYPE=Release && \
    rm -rf /var/lib/apt/lists/*


# setup entrypoint
WORKDIR /workspace
COPY ./docker/ros_entrypoint.sh /ros_entrypoint.sh
RUN ["chmod", "+x", "/ros_entrypoint.sh"]
RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc



##################################################################################################################
# Install Dependencies for CenterPoint
##################################################################################################################

# Install cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3.tar.gz
RUN tar -zxvf cmake-3.17.3.tar.gz
RUN cd cmake-3.17.3 && ./bootstrap
RUN cd cmake-3.17.3 && make 
RUN cd cmake-3.17.3 && make install 
RUN rm cmake-3.17.3.tar.gz



# rospkg
RUN pip install --no-cache-dir -U rospkg


##################################################################################################################
# Setup CenterPoint
##################################################################################################################

# Nuscenes dev-kit
WORKDIR /workspace
COPY nuscenes-devkit ./nuscenes-devkit
ENV PYTHONPATH "${PYTHONPATH}:/workspace/nuscenes-devkit/python-sdk"

# set the cuda path(change the path to your own cuda location) 
ENV PATH=/usr/local/cuda-11.1/bin:$PATH
ENV CUDA_PATH=/usr/local/cuda-11.1
ENV CUDA_HOME=/usr/local/cuda-11.1
ENV LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH

# APEX
WORKDIR /workspace
COPY apex ./apex
WORKDIR /workspace/apex
RUN pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" ./

# spconv
RUN apt-get update && apt-get install -y libboost-all-dev

WORKDIR /workspace
COPY spconv ./spconv
WORKDIR /workspace/spconv
RUN python3 setup.py bdist_wheel 
WORKDIR /workspace/spconv/dist
RUN pip install *

# CenterPoint - mount as volume and add to PythonPath
VOLUME /CenterPoint
ENV PYTHONPATH "${PYTHONPATH}:/workspace/CenterPoint"

# Install requirements.txt for CenterPoint
COPY docker/requirements_centerpoint.txt /opt/app/requirements_centerpoint.txt
WORKDIR /opt/app
RUN pip install --no-cache-dir -r requirements_centerpoint.txt

# CenterNet2 - mount as volume and add to PythonPath
VOLUME /CenterNet2
ENV PYTHONPATH "${PYTHONPATH}:/workspace/CenterNet2/projects"
ENV PYTHONPATH "${PYTHONPATH}:/workspace/CenterNet2"

##################################################################################################################
# Other
##################################################################################################################
# Clean image
# RUN apt-get clean && rm -rf /var/lib/apt/lists/* 

# Set up the work directory and entrypoint
WORKDIR /workspace





#########################################################
# Other
#########################################################
# Entrypoint
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
# Set up the work directory and entrypoint
WORKDIR /workspace